"use strict"
/* eslint-disable */
var { CompilationError, hasErrors, sortMessages } = require('../base/messages');
const { forEachDefinition, forEachMemberRecursively, forEachMember, setProp,
        cloneWithTransformations }  = require('../base/model');
const deepCopy = require('../base/deepCopy');
const { isAssocOrComposition, isStructuredElement, isManagedAssociationElement,
        foreachPath, printableName, mergeOptions, hasBoolAnnotation, getTopLevelArtifactNameOf,
        isElementWithType, addStringAnnotationTo, getArtifactDatabaseNameOf,
        getElementDatabaseNameOf } = require('../model/modelUtils');
const transformUtils = require('./transformUtilsNew');
const { checkTypeParameters } = require('../checks/checkElements');
const alerts = require('../base/alerts');
const { translateAssocsToJoins, constructPathNode } = require('./translateAssocsToJoins');


// Return a copy of augmented CSN 'model' with a number of transformations made for rendering
// in HANA CDS style, used by 'toHana', toSql' and 'toRename'.
// The behavior is controlled by the following options:
// options = {
//    forHana.names                               // See the behavior of 'names' in toHana, toSql and toRename
//    forHana.associations                        // See the behavior of 'associations' in toHana and toSql
//                                                // (please note that toSql will always set at least 'mixin')
//    forHana.keepNamespaces                      // Do not transform namespaces to contexts (to be used for
//                                                // producing HANA-CDS compatible names with 'toHana', 'toSql' ...)
//    forHana.keepStructsAssocs                   // Do not flatten structs, do not convert managed assocs to
//                                                // unmanaged ones, do not convert assocs to joins (to be used
//                                                // for rendering strictly HANA-CDS compatible CDS source with
//                                                // 'toHana')
//    forHana.alwaysResolveDerivedTypes           // Always resolve derived type chains (by default, this is only
//                                                // done for 'quoted' names). FIXME: Should always be done in general.
// }
// The result model will always have 'options.forHana' set, to indivate that these transformations have happened.
// The following transformations are made:
// - (000) Some primitive type names are mapped to HANA type names (e.g. DateTime => UTCDateTime,
//         Date => LocalDate, ...).The primitive type 'UUID' is renamed to 'String' (see also 060 below).
// - (001) Add a temporal where condition to views where applicable before assoc2join
// - (010) (not for 'keepStructsAssocs'): Transform associations to joins if requested by option
//         'forHana.associations'
// - (015) Draft shadow entities are generated for entities/views annotated with '@odata.draft.enabled'.
// - (020) Check: in "plain" mode, quoted ids are not allowed.
//         (a) check in namespace declarations
//         (b) check in artifact/element definitions.
// - (030) ("plain" only) For all elements, derived types are replaced by their final base type.
// - (040) Abstract entities and entities 'implemented in' something are ignored, as well
//         as entities annotated with '@cds.persistence.skip' or '@cds.persistence.exists'.
// - (045) The query is stripped from entities that are annotated with '@cds.persistence.table',
//         essentially converting views to entities.
// - (050) Checks on the hierarchical model (pre-flattening)
//         array of, @cds.valid.from/to
// - (060) Users of primitive type 'UUID' (which is renamed to 'String' in 000) get length 36'.
// - (070) Default length 5000 is supplied for strings if not specified.
// - (080) Annotation definitions are ignored (note that annotation assignments are filtered out by toCdl).
// - (090) Compositions become associations.
// - (100) 'masked' is ignored (a), and attribute 'localized' is removed (b)
// - (110) Actions and functions (bound or unbound) are ignored.
// - (120) (a) Services become contexts.
//         (b) (not for 'keepNamespaces'): Namespaces become contexts.
// - (130) (not for 'keepStructsAssocs'): Elements having structured types are flattened into
//         multiple elements (using '_' or '.' as name separator, depending on 'forHana.names').
// - (140) (not for 'keepStructsAssocs'): Managed associations get explicit ON-conditions, with
//         generated foreign key elements (also using '_' or '.' as name separator, depending on 'forHana.names').
// - (150) (a) Elements from inherited (included) entities are copied into the receiving entity
//         (b) The 'include' property is removed from entities.
// - (160) Projections become views, with MIXINs for association elements (adding $projection where
//         appropriate for ON-conditions).
// - (170) ON-conditions referring to '$self' are transformed to compare explicit keys instead.
// - (180) In projections and views, ...
//         (a) association elements that are mixins must not be explicitly redirected
//         (b) MIXINs are created for association elements in the select list that are not mixins by themselves.
// - (190) For all enum types, ...
//         (a) enum constants in defaults are replaced by their values (assuming a matching enum as element type)
//         (b) the enum-ness is stripped off (i.e. the enum type is replaced by its final base type).
// - (200) The 'key' property is removed from all elements of types.
// - (210) (not for 'keepStructsAssocs'): Managed associations in GROUP BY and ORDER BY are
//         replaced by by their foreign key fields.
// - (220) Contexts that contain no artifacts or only ignored artifacts are ignored.
// - (230) (only for 'keepStructsAssocs'): The following are rejected in views
//         (a) Structured elements
//         (b) Managed association elements
//         (c) Managed association entries in GROUP BY
//         (d) Managed association entries in ORDER BY
// - (240) All artifacts (a), elements, foreign keys, parameters (b) that have a DB representation are annotated
//         with their database name (as '@cds.persistence.name') according to the naming convention chosen
//         in 'options.forHana.names'.
function transformForHanaWithCsn(inputModel, options) {
  // Work on a copy of the input model
  const { error, warning, info, signal } = alerts(inputModel);
  // copy the model so we don't change the original one
  // we cannot use JSON-parse-JSON-stringify as the locations would be lost
  let model = deepCopy(inputModel);
  model.messages = inputModel.messages;

  // Tell consumers that this model has undergone the transformations for HANA, and merge options into model
  model.options = mergeOptions({ forHana: true }, inputModel.options, options);
  options = model.options;


  const pathDelimiter = (options.forHana.names == 'hdbcds') ? '.' : '_';

  const { flattenStructuredElement, flattenForeignKeys, checkForeignKeys,
    flattenStructStepsInPath, createForeignKeyElement, toFinalBaseType,
    addImplicitRedirections, isAssociationOperand, isDollarSelfOperand,
    createAndAddDraftAdminDataProjection, createScalarElement, createAssociationElement,
    addElement,copyAndAddElement, createAssociationPathComparison,
    extractValidFromToKeyElement, checkAssignment, checkMultipleAssignments } = transformUtils.getTransformers(model, pathDelimiter);



  ////////////////////////////////////////////////////////////////////////////////////////////////////////////

  /**
   * Check if any warnings were raised in earlier steps that need to be reclassified - i.e. as errors
   *
   * @param {any} model The model
   * @returns {Array} Reclassified messages-Array
   */
  function reclassifyWarnings(model){
    return model.messages.map(message => {
      switch(message.messageId){
        case 'to-many-no-on':
          if(!message.context.EntityhasPersistenceSkipOrTrueOrAbstract) message.severity = 'Error';
          break;
      }
      return message;
    })

  }
  if(model.messages)
    model.messages = reclassifyWarnings(model);
  // Throw up if we have errors
  if (hasErrors(model.messages)) {
    throw new CompilationError( sortMessages(model.messages), model)
  }

  return model;
  
}

module.exports = {
  transformForHanaWithCsn
};
