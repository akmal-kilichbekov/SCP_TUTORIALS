const { getError } = require('../../errors')
const getClientIpFromRequest = require('../../services/utils/clientIpFromRequest')
const getAnnotations = require('../utils/getAnnotations')

const _getScopes = req => {
  if (!req.authInfo) {
    req.authInfo = {
      scopes: ['any']
    }
  }

  if (!req.authInfo.scopes) {
    req.authInfo.scopes = ['any']
  } else if (!req.authInfo.scopes.includes('any')) {
    req.authInfo.scopes.push('any')
  }

  if (req.authInfo.scopes.includes('openid')) {
    if (!req.authInfo.scopes.includes('authenticated-user')) {
      req.authInfo.scopes.push('authenticated-user')
    }

    if (!req.authInfo.scopes.includes('identified-user')) {
      req.authInfo.scopes.push('identified-user')
    }
  }

  if (req.authInfo.grantType === 'client_credentials' || req.authInfo.grantType === 'client_x509') {
    if (!req.authInfo.scopes.includes('system-user')) {
      req.authInfo.scopes.push('system-user')
    }
  }

  return req.authInfo.scopes
}

const _getRequestMethod = req => {
  switch (req.method) {
    case 'GET':
    case 'HEAD':
      return 'READ'
    case 'PUT':
    case 'PATCH':
      return 'UPDATE'
    case 'POST':
      return 'CREATE'
    default:
      return req.method
  }
}

const _auditLog = (auditLogger, req) => {
  if (req.authInfo.identityZone) {
    auditLogger.logMissingPermissions({
      user: req.user ? req.user.id : 'anonymous',
      ip: getClientIpFromRequest(req),
      tenant: req.authInfo.identityZone
    })
  } else {
    auditLogger.logMissingPermissions({
      user: req.user ? req.user.id : 'anonymous',
      ip: getClientIpFromRequest(req)
    })
  }
}

const includesRequiredScopes = (requiredScopes, availableScopes, xsappname) => {
  return requiredScopes.some(
    required => availableScopes.includes(required) || availableScopes.includes(`${xsappname}.${required}`)
  )
}

/**
 * Get generic authorization handler on service level.
 * The handler to be registered as an express middleware handler after the proxy API is generated.
 *
 * @param service
 * @param auditLogger - the audit logger object
 * @returns {function(*, *, *)}
 *
 */
const getAuthServiceHandler = (service, auditLogger) => {
  const annotations = getAnnotations(service)

  if (Object.keys(annotations).length) {
    let requiredScopes

    return (req, res, next) => {
      if (annotations[_getRequestMethod(req)]) {
        requiredScopes = annotations[_getRequestMethod(req)].reduce((scopes, anno) => {
          scopes.push(...anno.to)

          return scopes
        }, [])
      }

      if (
        !annotations[_getRequestMethod(req)] ||
        !includesRequiredScopes(requiredScopes, _getScopes(req), req.authInfo.xsappname)
      ) {
        _auditLog(auditLogger, req)
        next(getError(403))
        return
      }

      next()
    }
  }

  return (req, res, next) => {
    next()
  }
}

module.exports = getAuthServiceHandler
