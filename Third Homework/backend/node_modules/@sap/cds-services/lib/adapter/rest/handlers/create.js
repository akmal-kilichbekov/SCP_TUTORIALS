const getContextObject = require('../utils/context-object')
const { parseCreateUrl } = require('../utils/parse-url')
const handleError = require('../utils/handle-error')
const validationChecks = require('../utils/validation-checks')
const { contentTypeCheck } = require('../utils/header-checks')

const _locationHeader = (entity, serviceName, resultObject) => {
  const keyName = Object.keys(entity.keys)[0]
  const entityNameWithoutServicePrefix = entity.name.replace(`${serviceName}.`, '')

  return `../${entityNameWithoutServicePrefix}/${resultObject[keyName]}`
}

const _convertCustomOperationReturnValue = (returns, result) => {
  if (returns.items) {
    return result
  } else {
    return Array.isArray(result) ? result[0] : result
  }
}

const create = service => {
  return (req, res) => {
    const contentTypeError = contentTypeCheck(req)
    if (contentTypeError) return handleError(contentTypeError, service, res)
    let parsedUrl
    try {
      parsedUrl = parseCreateUrl(service, req)
    } catch (err) {
      return handleError(err, service, res)
    }

    const context = getContextObject(service, parsedUrl, req, res)

    const err = validationChecks(context.data, context.target || { elements: parsedUrl.segments[0].params })
    if (err) return handleError(err, service, res)

    if (parsedUrl.customOperation) {
      const operation = parsedUrl.segments[parsedUrl.segments.length - 1]
      return service
        .processEvent(context)
        .then(result => {
          // TODO: validation for correct return type
          if (!operation.returns) {
            return res.status(204).send()
          }

          res.status(200)
          res.send(_convertCustomOperationReturnValue(operation.returns, result))
        })
        .catch(err => {
          // Hide errors in generic message but log detailed error
          handleError(err, service, res)
        })
    }

    return service
      .processEvent(context)
      .then(result => {
        context.emit('succeeded')
        context.emit('done')

        res.status(201)

        if (result.length === 1) {
          res.set('location', _locationHeader(context.target, service.name, result[0]))
          res.send(result[0])
        } else {
          res.send(result)
        }
      })
      .catch(err => {
        context.emit('failed', err)
        context.emit('done')

        // Hide errors in generic message but log detailed error
        handleError(err, service, res)
      })
  }
}

module.exports = create
