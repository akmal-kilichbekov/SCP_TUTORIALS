const cp = require('child_process');
const path = require('path');
const util = require('util');

const execAsync = util.promisify(cp.exec);

const { nullLogger } = require('./logger');

class HdiDeployUtil {
    constructor() {
    }


    static async deploy(dbDir, instanceCredentials, options = {}, logger = nullLogger) {
        logger.log();
        logger.log(`[cds.deploy] - Deploying to hdi`);

        let deployerEnv = JSON.parse(JSON.stringify(process.env)); // deep copy
        const hdiDeployLib = await HdiDeployUtil._getHdiDeployLib();
        if (hdiDeployLib.clean_env) {
            deployerEnv = hdiDeployLib.clean_env(deployerEnv);
        }

        deployerEnv.VCAP_SERVICES = JSON.stringify({
            hana: [instanceCredentials]
        });

        if (options.autoUndeploy) {
            logger.log(`[cds.deploy] - Hdi deployer automatically undeploys deleted resources using --auto-undeploy.`);
            deployerEnv.HDI_DEPLOY_OPTIONS = JSON.stringify({
                'auto_undeploy': true
            });
        }

        await this._executeDeploy(dbDir, deployerEnv, logger);
    }


    static async _getHdiDeployLib() {
        if (!HdiDeployUtil.hdiDeployLib) {
            HdiDeployUtil.hdiDeployLib = await HdiDeployUtil._loadHdiDeployLib();
        }

        return HdiDeployUtil.hdiDeployLib;
    }


    static async _loadHdiDeployLib() {
        try {
            return require('@sap/hdi-deploy/library');
        } catch (err) {
            if (err.code !== 'MODULE_NOT_FOUND') {
                throw err;
            }
        }

        const npmRootCall = await execAsync('npm root -g');
        const globalNodeModules = npmRootCall.stdout.toString().trim();
        const libPath = path.join(globalNodeModules, '@sap/hdi-deploy/library');

        try {
            return require(libPath);
        } catch (err) {
            throw new Error(`[cds.deploy] - Required library @sap/hdi-deploy not found.
Install it seperately either as global or local npm library depending on your cds installation using "npm i @sap/hdi-deloy".
${err.message}`);
        }
    }


    static async _executeDeploy(dir, env, logger = nullLogger) {
        const hdiDeployLib = await HdiDeployUtil._getHdiDeployLib();
        return new Promise((resolve, reject) => {
            hdiDeployLib.deploy(dir, env, (error, response) => {
                if (error) {
                    return reject(error);
                }
                if (response && response.exitCode && response.exitCode > 0) {
                    return reject(new Error(`[cds.deploy] - HDI deployment failed with exit code ${response.exitCode}`));
                }
                return resolve();
            }, {
                    stdoutCB: data => logger.debug(data.toString()),
                    stderrCB: error => logger.error(error.toString())
                });
        });
    }
}


module.exports = HdiDeployUtil;

/* eslint no-console: off */
