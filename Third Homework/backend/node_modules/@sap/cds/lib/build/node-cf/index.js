const fs = require('fs-extra')
const path = require('path')
const BuildTaskHandlerOData = require('../buildTaskHandlerOData')
const { getApplicationName, getHdiServiceName } = require('../../utils/mtaUtil')
const { BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY, ODATA_VERSION, ODATA_VERSION_V2, BUILD_NODEJS_EDMX_GENERAION, BUILD_TASK_HANA } = require('../constants')

const GENERATION_FOLDER = "gen"
const DEBUG = process.env.DEBUG
const FILE_NAME_PACKAGE_JSON = "package.json"
const FILE_NAME_MANIFEST_YAML = "manifest.yaml"

class NodeCfModuleBuilder extends BuildTaskHandlerOData {
    constructor(task, buildOptions) {
        super("Node CF Module Builder", task, buildOptions)

        if (this._isStagingBuild()) {
            const srcDir = path.relative(this.buildOptions.root, this.task.src)
            this.task.dest = path.resolve(this.task.dest, srcDir)
        }
    }

    async build() {
        // resolve specified models, using all models by default, e.g.
        // { use:'...', src:'srv', options:{model:['app','srv']} }
        // { use:'...', src:'srv' }
        const modelPaths = this._resolveModel()
        const destGen = this._isStagingBuild() ? this.task.dest : path.join(this.task.dest, GENERATION_FOLDER)

        this.logger.log(`\n[cds] - building module [${this._stripProjectPaths(this.task.src)}] using [${this.name}]`)

        if (this.hasCdsEnvOption(ODATA_VERSION, ODATA_VERSION_V2)) {
            // log warning as nodejs is only supporting odata version V4
            // investigate whether the build should fail in order to enforce correct configuration data
            this.logger.warn("[cds] - [odata.version = 'v2'] not supported by node runtime, define [odata.version = 'v4'] in package.json instead")
        }

        if (!modelPaths || modelPaths.length === 0) {
            this.logger.log("[cds] - no model found, skip build")
            return this._result
        }

        this.logger.log(`[cds] - model: ${this._stripProjectPaths(modelPaths).join(", ")}`)

        const promises = []
        const model = await this.cds.load(modelPaths)
        const csn = await this._compileCsn(modelPaths, path.join(destGen, "csn.json"))
        const bundles = this._collectBundles(csn._sources)
        const {
            folders = ['i18n'], file = 'i18n'
        } = this.cds.env.i18n

        if (this.hasCdsEnvOption(BUILD_NODEJS_EDMX_GENERAION, true) || this.hasBuildOption('edmxGeneration', true)) {
            promises.push(this._compileEdmx(model, destGen))
        }

        if (!this.hasBuildOption(BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY)) {
            promises.push(this._copyNativeContent(this.task.src, this.task.dest))
            if (!this.task.options.skipPackageJsonGeneration) {
                promises.push(this._writePackageJson(this.buildOptions.root, this.task.dest))
            }

            if (!this.task.options.skipManifestGeneration) {
                promises.push(this._writeManifestYaml())
            }

            if (Object.keys(bundles).length > 0) {
                promises.push(this.write(bundles).to(path.join(destGen, folders[0], file + '.json')))
            }
            await Promise.all(promises)
        }
        return this._result
    }

    async clean() {
        const inplaceGenDir = path.join(this.task.src, "gen")
        const promises = []

        // make sure a gen folder created by an inplace build will be deleted
        const exists = await fs.pathExists(inplaceGenDir)
        if (exists) {
            promises.push(fs.remove(inplaceGenDir))
        }

        if (this._isStagingBuild()) {
            promises.push(super.clean())
        }
        return Promise.all(promises)
    }

    async _compileCsn(modelPaths, csnPath) {
        const cdsv = require('../../models/cdsv')
        const csn = await cdsv.compile(modelPaths, path.relative(process.cwd(), this.task.src))

        if (!this.hasBuildOption(BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY)) {
            await this.write(csn).to(csnPath)
        }
        this._result.csn = csn

        return csn
    }

    async _copyNativeContent(src, dest) {
        return super._copyNativeContent(src, dest, (entry) => {
            const extname = path.extname(entry)
            const basename = path.basename(entry)

            return ((fs.statSync(entry).isDirectory() && path.dirname !== dest) || (extname !== '.cds' && basename !== FILE_NAME_PACKAGE_JSON))
        })
    }

    async _writePackageJson(projectRoot, dest) {
        if (this._isStagingBuild()) {
            const packageJsonDest = path.join(path.dirname(dest), FILE_NAME_PACKAGE_JSON)
            const packageJsonSrc = path.join(projectRoot, FILE_NAME_PACKAGE_JSON)
            await this.copy(packageJsonSrc).to(packageJsonDest)
        }
    }

    async _writeManifestYaml() {
        if (!this._isStagingBuild()) {
            return
        }
        const existsManifestYaml = await this._existsManifestYaml()
        if (existsManifestYaml) {
            if (DEBUG) {
                this.logger.log('[cds] - skip creating [manifest.yaml], already existing')
            }
            return
        }

        // check whether we a hdi service binding is required
        const hanaBuildTask = this.buildOptions.tasks.find(task => task.for === BUILD_TASK_HANA)
        if (!hanaBuildTask) {
            this.logger.log("[cds] - skip creating [manifest.yaml] - no build task [hana] existing")
            return
        }

        const dbModuleName = path.relative(this.buildOptions.root, hanaBuildTask.src)
        const [hdiServiceName, applicationName] = await Promise.all([
            getHdiServiceName(this.buildOptions.root, dbModuleName, this.logger),
            getApplicationName(this.buildOptions.root, this.task.src, "nodejs", this.logger)
        ])

        const MANIFEST_YAML_CONTENT = `---
applications:
- name: ${applicationName}
  services:
  - ${hdiServiceName}`

        await this.write(MANIFEST_YAML_CONTENT).to(path.join(path.dirname(this.task.dest), FILE_NAME_MANIFEST_YAML))
    }

    async _existsManifestYaml() {
        return await fs.pathExists(path.join(this.buildOptions.root, FILE_NAME_MANIFEST_YAML)) || await fs.pathExists(path.join(this.task.src, FILE_NAME_MANIFEST_YAML))
    }

    _collectBundles(sources) {
        // collect effective i18n properties...
        let bundles = {}
        const bundleGenerator = this.cds.localize.bundles4({
            _sources: sources
        })

        if (typeof bundleGenerator === "object" && bundleGenerator.next) {
            for (let [locale, bundle] of bundleGenerator) {
                // fallback bundle has the name ""
                if (typeof locale === 'string') {
                    bundles[locale] = bundle
                }
            }
        }

        // omit bundles in case the fallback bundle is the only existing entry
        const keys = Object.keys(bundles)
        if (keys.length === 1 && keys[0] === "" && Object.keys(bundles[keys[0]]).length === 0) {
            bundles = {}
        }

        return bundles
    }
}

module.exports = NodeCfModuleBuilder
