const fs = require('fs-extra')
const path = require('path')

const DEBUG = process.env.DEBUG
const HDI_CONTAINER_TYPE = 'com.sap.xs.hdi-container'
const UTF_8 = 'utf-8'
const MTA_YAML = 'mta.yaml'

async function getHdiServiceName(projectPath, modulePath, logger) {
    if (!projectPath || !modulePath || !logger) {
        throw new Error('Invalid parameter')
    }
    const mta = await _getMta(projectPath, logger)
    const moduleName = path.relative(projectPath, modulePath)
    const hdiResource = _findHdiResource(mta, moduleName, logger)

    return hdiResource ? hdiResource.name : `${path.basename(projectPath)}-${moduleName}-hdi-container`
}

async function getHdiContainerName(projectPath, modulePath, logger) {
    if (!projectPath || !modulePath || !logger) {
        throw new Error('Invalid parameter')
    }
    const mta = await _getMta(projectPath, logger)
    const moduleName = path.relative(projectPath, modulePath)
    const hdiResource = _findHdiResource(mta, moduleName, logger)

    if (hdiResource && hdiResource.properties) {
        const hdiContainerName = hdiResource.properties['hdi-container-name'];
        if (hdiContainerName && hdiContainerName !== '${service-name}') { // NOSONAR
            return hdiContainerName;
        } else {
            return hdiResource.name;
        }
    }

    const defaultName = `${path.basename(projectPath)}-hdi-container`;
    logger.warn(`Using default container name ${defaultName}`);
    return defaultName;
}

async function getApplicationName(projectPath, modulePath, moduleType, logger) {
    if (!projectPath || !modulePath || !logger) {
        throw new Error('Invalid parameter')
    }
    const mta = await _getMta(projectPath, logger)
    const moduleName = path.relative(projectPath, modulePath)
    const module = _findModule(mta, moduleName, moduleType)

    return module ? module.name : `${path.basename(projectPath)}-${moduleName}`
}

async function findModules(projectPath, logger) {
    if (!projectPath || !logger) {
        throw new Error('Invalid parameter')
    }
    const mta = await _getMta(projectPath, logger)

    if (mta && Array.isArray(mta.modules)) {
        return mta.modules
    }
    return []
}

async function _getMta(projectPath, logger) {
    // yaml.parse  oesn't like null
    const mtaFilePath = path.join(projectPath, MTA_YAML)

    const existsMtaYaml = await fs.pathExists(mtaFilePath)
    if (!existsMtaYaml) {
        if (DEBUG) {
            logger.log('[cds] - mta.yaml not existing')
        }
        return null
    }

    try {
        const yamlStr = await fs.readFile(mtaFilePath, UTF_8);

        // yaml returns null if string couldn't be parsed, e.g. empty string
        const YAML = require('yaml');
        return YAML.parse(yamlStr) || null
    } catch (e) {
        if (e.name === 'YAMLSyntaxError') {
            logger.error(`Failed to parse [${mtaFilePath}]`)
        }
        logger.log(e)
    }
    return null
}

function _findModules(mta, moduleType) {
    let modules = []
    if (mta && Array.isArray(mta.modules)) {
        modules = mta.modules.filter(module => module.type === moduleType)
    }
    return modules
}

function _findModule(mta, moduleName, moduleType) {
    const modules = _findModules(mta, moduleType)
    if (modules.length === 1) {
        return modules[0]
    } else if (modules.length > 1) {
        return modules.find(module => typeof module.path === 'string' && module.path.includes(moduleName))
    }
    return null
}

function _findHdiResource(mta, moduleName, logger) {
    if (mta && Array.isArray(mta.resources)) {
        const hdiResources = mta.resources.filter(resource => resource.type === HDI_CONTAINER_TYPE)

        if (hdiResources.length > 0) {
            if (Array.isArray(mta.modules)) {
                const module = _findModule(mta, moduleName, 'hdb')
                if (module && Array.isArray(module.requires)) {
                    return hdiResources.find(hdiResource =>
                        module.requires.find(req =>
                            hdiResource.name === req.name
                        )
                    );
                }
            }

            logger.warn(`No matching hdi resource found for ${moduleName}. Using ${hdiResources[0].name}.`);
            return hdiResources[0];
        }
    }

    return null
}

module.exports = {
    getHdiContainerName,
    getHdiServiceName,
    getApplicationName,
    findModules,
    MTA_YAML
}
