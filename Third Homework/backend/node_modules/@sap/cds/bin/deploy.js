module.exports = Object.assign(deploy, {
  options: ['--to'], flags: ['--no-save', '--auto-undeploy'],
  shortcuts: ['-2'],
  help: `
# SYNOPSIS

    *cds deploy* [ <model> ] [ <options> ]

    Deploys the given model to a database. If no model is given it looks up
    according configuration from _package.json_ or _.cdsrc.json_ in key
    _cds.requires.db_.  Same for the database.

    Supported databases: sqlite


# OPTIONS
    *-2* | *--to* <database>

    *--no-save*

`})

const cds = require('../lib/cds')

async function deploy ([_model], { to:_to, 'no-save':no_save = cds.env.deploy.no_save, 'auto-undeploy': autoUndeploy = false}) { // NOSONAR

  if (!_to && !cds.env.requires.db)  throw new Error(`

  There's no database configured in 'cds.require.db'.
  Please do so or specify one, e.g.:

      cds deploy --to sqlite:db/my.db
  `)

  let url = _to
  const [,_kind,_database] = /(\w+)?(?::(.*))?/.exec(url||'')
  const conf = cds.env.requires.db || {}
  const kind = _kind || conf.kind
  const model = _model || conf.model || ['db','srv']
  const database = _database || conf.credentials && conf.credentials.database
  if (!url && kind && database)  url = kind + ':' + database // reconstruct URL out of config

  try {
    if (kind === 'hana') {
      const deployHana = require('../lib/deploy/hana');
      await deployHana(model, null, null, null, { autoUndeploy });

    } else {
      const db = await cds.deploy(model) .to (url || kind)
      db.disconnect()  // REVISIT: we should NOT require to explicitly disconnect
      if (_to && !no_save)  await registerDatasource (kind,model,database)
      console.log (`/> successfully deployed database to ./${database || (kind+'.db')}`)
    }
  } catch (e) {
      if (!model && e.code === 'MODEL_NOT_FOUND') {
        throw new Error('Please specify a data model or configure one in package.json#cds.requires.db.model')
      } else throw e
  }
}


function registerDatasource (kind,model,database) { try {
  const package_json = require('path') .resolve ('package.json')
  const conf = require (package_json)
  const requires = ['cds','requires'] .reduce ((p,n)=>p[n] || (p[n]={}), conf)
  cds.env.requires.db = requires.db = { kind, model }
  if (database)  requires.db.credentials = {database}
  const write = require('util').promisify (require('fs').writeFile)
  return write (package_json, JSON.stringify(conf,null,'  ')).then (()=>
    console.log (' > updated package.json')
  )
} catch(e){/* ignore */}}

/* eslint no-console: off */
