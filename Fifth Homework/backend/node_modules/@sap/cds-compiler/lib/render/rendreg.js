/**
 * Rendering registry is used to collect names during the rendering phase.
 * Those are the names of the artifacts (tables names, view names, type names)
 * and the names of their elements (column names, parameter names).
 * Finally the collected names will be checked for duplicates
 * and the appropriate error messages will be reported.
 *
 * Usage: Create an instance to process artifacts which should be checked for collision.
 * As an input parameter pass the augmented CSN model.
 * First call addArtifact to specify the current artifact,
 * then call addElement to register the elements of the current artifact.
 * Finally call the "done" function to check for duplicates.
 * In addition the internal structures will be reinitialized to enable reusage of the instance.
 */

const W = require("../json/walker")
const alerts = require('../base/alerts');

let newInstance = function(model) {

  let { signal, error } = alerts(model);

  let mArtifacts;
  let mCurrentArtifact ;

  // re-initialization
  function init() {
    mArtifacts = {};
    mCurrentArtifact = {};
  }

  // database name - uppercase if not quoted
  function asDBName(name) {
    return (name[0]=='"')
      ? name
      : name.toUpperCase();
  }

  init();

  return {

    addArtifact: (name,location) => {
      let dbname = asDBName(name);
      mCurrentArtifact = {name,location,elements:{}};
      if(!mArtifacts[dbname])
        mArtifacts[dbname] = [mCurrentArtifact];
      else
        mArtifacts[dbname].push(mCurrentArtifact);
    },

    addElement: (name,location) => {
      if(!mCurrentArtifact.elements)
        return;
      let dbname = asDBName(name);
      let currentElements = mCurrentArtifact.elements;
      let element = {name,location};
      if(!currentElements[dbname])
        currentElements[dbname] = [element];
      else
        currentElements[dbname].push(element);
    },

    done: () => {
      W.forEach(mArtifacts, (AN,A) => {
        if(A.length>1) {
          A.forEach(iA => { // report all colliding artifacts
            signal(error`Duplicated artifact '${AN}', origin: '${iA.name}'`, iA.location);
          })
        }
        A.forEach(IA => {
          W.forEach(IA.elements, (EN,E) => {
            if(E.length>1) {
              E.forEach(iE => { // report all colliding elements
                signal(error`Duplicated element '${iE.name}' in artifact '${IA.name}'`, iE.location)
              })
            }
          })
        })
      })
      //clean internal structures
      init();
    }

  }

} // newInstance

module.exports = newInstance;