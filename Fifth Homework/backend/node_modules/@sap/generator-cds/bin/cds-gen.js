#!/usr/bin/env node

const minimist = require('minimist');

const { format } = require('../lib/helper/term');

const Constants = require('../lib/constants');
const i18n = require('../lib/i18n/i18n');
const generator = require('../lib/index');
const Logger = require('../lib/logger/logger');

const SYSTEM_ERRORS = [
    'EvalError', 'InternalError', 'RangeError', 'ReferenceError',
    'SyntaxError', 'TypeError', 'URIError'
];


if (!process.env[Constants.ENV_KEY_CDS_IDE]) {
    Logger.warn();
    Logger.warn('*******************************');
    Logger.warn('**** SAP Internal Use Only ****');
    Logger.warn('*******************************');
    Logger.warn();
}


const uniqueMerge = (whiteList, ...arrays) => {
    const result = [];

    for (let array of arrays) {
        for (let item of array) {
            // only add params passed in white list, e.g. via command line
            if (whiteList.includes(item)) {
                item = item.replace(/^--/, '');

                if (!result.includes(item)) {
                    result.push(item);
                }
            }
        }
    }

    return result;
};

const main = async argv => {
    const options = { ...argv };

    // remove args from options
    delete options._;

    if (options.version || options.v || argv._[0] === 'version') {
        const packageJson = require('../package.json');
        Logger.log(packageJson.version);
        return;
    }

    if (!argv._[0] || argv._[0] === 'help') {
        const helpText = generator.init.help;
        Logger.log(helpText);
        return;
    }

    try {
        switch (argv._[0]) {
            case 'init':
                await generator.init.command.run([argv._[1]], options);
                break;

            case 'add':
                // deprecated, only for compatibility
                const modFolder = argv._[2] || Constants.DEFAULT_MODULE_FOLDER[options['module-type']];
                options.modules = `${modFolder}:${options['module-type']}`;
                await generator.init.command.run(['.'], options);
                break;

            default:
                Logger.error(i18n.t(i18n.command_unknown, { cmd: argv._[0] }));
        }
    } catch (err) {
        if (SYSTEM_ERRORS.includes(err.name)) {
            const txt = format(err, 'Error', true);
            Logger.log(txt);
        } else if (argv.debug) {
            Logger.error(err);
        } else {
            Logger.error(err.message);
        }
    }
}

const options = {
    boolean: uniqueMerge(process.argv, generator.init.flags),
    string: uniqueMerge(process.argv, generator.init.options)
}

const _argv = minimist(process.argv.slice(2), options);
main(_argv);


// /* eslint no-console:0 no-eval: 0 */
