const getContextObject = require('../utils/context-object')
const { parseUpdateUrl } = require('../utils/parse-url')
const handleError = require('../utils/handle-error')
const validationChecks = require('../utils/validation-checks')
const { contentTypeCheck } = require('../utils/header-checks')

const update = service => {
  return (req, res) => {
    const contentTypeErr = contentTypeCheck(req)
    if (contentTypeErr) return handleError(contentTypeErr, service, res)
    let parsedUrl
    try {
      parsedUrl = parseUpdateUrl(service.entities, req)
    } catch (err) {
      return handleError(err, service, res)
    }

    const context = getContextObject(service, parsedUrl, req, res)
    const err = validationChecks(context.data, context.target)
    if (err) return handleError(err, service, res)

    return service
      .processEvent(context)
      .then(result => {
        context.emit('succeeded')
        context.emit('done')

        res.status(200)
        res.send(result[0])
      })
      .catch(err => {
        context.emit('failed', err)
        context.emit('done')

        // Hide errors in generic message but log detailed error
        handleError(err, service, res)
      })
  }
}

module.exports = update
