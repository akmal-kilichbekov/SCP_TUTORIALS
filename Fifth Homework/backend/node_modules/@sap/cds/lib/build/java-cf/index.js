const fs = require('fs-extra')
const path = require('path')
const BuildTaskHandler = require('../buildTaskHandler')
const BuildTaskHandlerOData = require('../buildTaskHandlerOData')
const { BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY } = require('../constants')

const GENERATION_FOLDER = path.join("src", "main", "resources", "edmx")

class JavaCfModuleBuilder extends BuildTaskHandlerOData {
    constructor(task, buildOptions) {
        super("Java CF Module Builder", task, buildOptions)

        // use the location of the pom.xml file as destination
        const pomXmlFiles = BuildTaskHandler._find(this.task.src, entry => fs.statSync(entry).isDirectory() || path.basename(entry) === "pom.xml")
        if (pomXmlFiles.length > 0) {
            pomXmlFiles.sort()
            const srcMainRoot = path.relative(this.task.src, path.dirname(pomXmlFiles[0]))
            this.task.dest = path.resolve(this.task.dest, srcMainRoot)
        }
    }

    async build() {
        const modelPaths = this._resolveModel()
        const { src, dest } = this.task

        this.logger.log(`\n[cds] - building module [${this._stripProjectPaths(src)}] using [${this.name}]`)

        if (!modelPaths || modelPaths.length === 0) {
            this.logger.log(`[cds] - no model found, skip build`)
            return this._result
        }

        this.logger.log(`[cds] - model: ${this._stripProjectPaths(modelPaths).join(", ")}`)

        const model = await this.cds.load(modelPaths)
        const csnPath = path.join(dest, GENERATION_FOLDER, 'csn.json')
        const edmxPath = path.join(dest, GENERATION_FOLDER)

        const promises = [
            this._compileCsn(model, csnPath),
            this._compileEdmx(model, edmxPath)
        ]

        if (!this.hasBuildOption(BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY)) {
            promises.push(this._copyNativeContent(src, dest))
        }
        await Promise.all(promises)

        return this._result
    }

    async clean() {
        const srcGenDir = path.join(this.task.src, GENERATION_FOLDER)
        const promises = []

        // make sure a gen folder created by an inplace build will be deleted
        if (fs.existsSync(srcGenDir)) {
            promises.push(fs.remove(srcGenDir))
        }

        if (this.task.src !== this.task.dest) {
            promises.push(super.clean())
        }
        return Promise.all(promises)
    }

    async _copyNativeContent(src, dest) {
        return super._copyNativeContent(src, dest, (entry) => {
            const extname = path.extname(entry)
            return ((fs.statSync(entry).isDirectory() && path.dirname !== dest) || extname !== '.cds')
        })
    }
}
module.exports = JavaCfModuleBuilder
